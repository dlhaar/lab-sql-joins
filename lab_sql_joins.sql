USE sakila;

-- Write SQL queries to perform the following tasks using the Sakila database:
-- 1. List the number of films per category.
SELECT category_id
	, COUNT(film_id) as number_of_films
FROM film_category
GROUP BY 1;

-- 2. Retrieve the store ID, city, and country for each store.
SELECT s.store_id
	,city.city
    ,c.country
FROM store as s
JOIN address as a on s.address_id = a.address_id
JOIN city on a.city_id = city.city_id
JOIN country as c on city.country_id = c.country_id;

-- 3. Calculate the total revenue generated by each store in dollars.
SELECT s.store_id
	, SUM(p.amount)
FROM payment as p
JOIN staff ON p.staff_id = staff.staff_id
JOIN store as s ON staff.store_id = s.store_id
GROUP BY 1;

-- 4. Determine the average running time of films for each category.
SELECT fc.category_id
	, AVG(f.length) as average_running_time
FROM film as f
JOIN film_category as fc on f.film_id = fc.film_id
GROUP BY 1;

-- 5. Identify the film categories with the longest average running time.
SELECT fc.category_id
	, AVG(f.length) as average_running_time
FROM film as f
JOIN film_category as fc on f.film_id = fc.film_id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1; -- the film category with the longest average running time

-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT film.title
	, COUNT(rental.inventory_id) as number_of_rentals
FROM film
JOIN inventory ON film.film_id = inventory.film_id
JOIN rental ON inventory.inventory_id = rental.inventory_id
GROUP BY 1
ORDER BY 2 DESC
LIMIT 10;

-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT film.title
	,s.store_id
FROM film
JOIN inventory as i ON film.film_id = i.film_id
JOIN store as s ON i.store_id = s.store_id
WHERE film.title LIKE "Academy Dinosaur" AND s.store_id = 1;